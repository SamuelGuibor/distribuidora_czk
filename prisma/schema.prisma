generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          String    @default("USER") // Campo para indicar o papel do usuário
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  orders Order[] // Relacionamento com pedidos (agora bidirecional)
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// tabelas

model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  imageUrl    String
  price       Decimal  @db.Decimal(10, 2)
  stock       Int      @default(0)
  category    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  orderItems OrderItem[] // Relacionamento com a tabela OrderItem
}

model OrderItem {
  id        String @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float // Preço do produto no momento da compra

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

model Order {
  id           String   @id @default(cuid())
  userId       String
  shippingCost Float? // Certifique-se de que este campo está correto
  street       String?
  neighborhood String?
  number       String?
  complement   String?
  cep          String?
  totalAmount  Float
  status       String   @default("PENDING") // status do pedido, ex: PENDING, PAID, SHIPPED, etc.
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user       User        @relation(fields: [userId], references: [id])
  orderItems OrderItem[] // Relacionamento com a tabela OrderItem
  payments   Payment[] // Relacionamento com a tabela Payment
}

model Payment {
  id            String   @id @default(cuid())
  orderId       String
  mercadoPagoId String?   @unique // <-- Novo campo para armazenar o ID do Mercado Pago
  amount        Float
  paymentMethod String   // Ex: CREDIT_CARD, PAYPAL, BANK_TRANSFER
  status        String   @default("PENDING") // PENDING, COMPLETED, FAILED, etc.
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  order Order @relation(fields: [orderId], references: [id])
}

model AccountPayable {
  id          String      @id @default(cuid())
  fornecedor  String
  valor       Decimal
  validade    DateTime
  pago        Boolean  @default(false)
  createdAt   DateTime @default(now())
}

model Sale {
  id        String      @id @default(cuid())
  product   String
  value     Decimal
  payment   String
  createdAt DateTime @default(now())
}
